}
location {
coordinates {
latLon {
lat
lon
}
}
}
}
}
'
# Let's figure out which sensor stations that are operable.
# The query below extracts all the stations, with a date for
# when the station was in operation as well as a long/latitude.
qry <-
'
{
trafficRegistrationPoints {
id
name
latestData {
volumeByDay
}
location {
coordinates {
latLon {
lat
lon
}
}
}
}
}
'
# Allright - let's try submitting the query:
stations <-GQL(qry)
length(stations)
length(stations[[1]])
length(stations[[1]][[1]])
stations[[1]][[1]]
#make this look nice so that we can analyse it
stations[[1]][[1]] %>%
as_tibble()
stations[[1]] %>%
map(as_tibble) %>%
list_rbind()
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1)
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1) %>%
select(latestData) %>%
pull()
#Exercise: transform latestData-column into a character columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1) %>%
select(latestData) %>%
mutate(split())
#Exercise: transform latestData-column into a character columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1) %>%
select(latestData) %>%
mutate(split(5))
#Exercise: transform latestData-column into a character columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1) %>%
select(latestData) %>%
mutate(strsplit(latestData,"00"))
#Exercise: transform latestData-column into a character columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1) %>%
mutate(strsplit(latestData,"00"))
#Exercise: transform latestData-column into a character columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1) %>%
mutate(strsplit(latestData,split="00"))
#Exercise: transform latestData-column into a character columns
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,"volumeByDay"))
#Exercise: transform latestData-column into a character columns
df_tmp<-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind()
df_tmp$latestData[1]
#Exercise: transform latestData-column into a character columns
df_tmp<-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_))
df_tmp
#Exercise: transform latestData-column into a character columns
df_tmp<-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as.Date(latestData))
df_tmp
#Exercise: transform latestData-column into a character columns
df_tmp<-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData))
df_tmp
#Exercise: transform latestData-column into a character columns
df_tmp<-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin"))
df_tmp
#Exercise: transform latestData-column into a character columns
df_tmp<-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
head(1) %>%
df_tmp
#Exercise: transform latestData-column into a character columns
df_tmp<-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
head(1) %>%
df_tmp
#Exercise: transform latestData-column into a character columns
df_tmp<-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
head(1) %>%
pull(location)
df_tmp
#Exercise: transform latestData-column into a character columns
df_tmp<-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
mutate(location=map(location,unlist))
df_tmp
#Exercise: transform latestData-column into a character columns
df_tmp<-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
mutate(location=map(location,unlist))
df_tmp
#Exercise: transform latestData-column into a character columns
df_tmp<-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
mutate(location=map(location,unlist)) %>%
mutate(
lat=map_dbl(location,"latLon.lat")
)
df_tmp
#Exercise: transform latestData-column into a character columns
df_tmp<-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
mutate(location=map(location,unlist)) %>%
mutate(
lat=map_dbl(location,"latLon.lat")
lon=map_dbl(location,"latLon.lon")
#Exercise: transform latestData-column into a character columns
df_tmp<-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
mutate(location=map(location,unlist)) %>%
mutate(
lat=map_dbl(location,"latLon.lat")
lon=map_dbl(location,"latLon.lon")
#Exercise: transform latestData-column into a character columns
df_tmp<-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
mutate(location=map(location,unlist)) %>%
mutate(
lat=map_dbl(location,"latLon.lat"),
lon=map_dbl(location,"latLon.lon")
)
df_tmp
#Exercise: transform latestData-column into a character columns
df_tmp<-
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
mutate(location=map(location,unlist)) %>%
mutate(
lat=map_dbl(location,"latLon.lat"),
lon=map_dbl(location,"latLon.lon")
) %>%
select(-location)
df_tmp
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
setwd("C:/Users/rysch/Downloads/iterations-Annalenary")
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
source("functions/data_transformations.r")
setwd("C:/Users/rysch/Downloads/iterations-Annalenary")
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
source("functions/data_transformations.r")
source("functions/data_tests.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
stations_metadata
#create a function that completes stations_metadata to a data frame
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1) %>%
select(latestData) %>%
pull()
#create a function that completes stations_metadata to a data frame
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
head(1)
#create a function that completes stations_metadata to a data frame
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
mutate(location=map(location,unlist)) %>%
mutate(
lat=map_dbl(location,"latLon.lat"),
lon=map_dbl(location,"latLon.lon")
) %>%
select(-location)
source("functions/data_transformations.r")
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
#create a function that completes stations_metadata to a data frame
transform_metadata_to_df<-
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
mutate(location=map(location,unlist)) %>%
mutate(
lat=map_dbl(location,"latLon.lat"),
lon=map_dbl(location,"latLon.lon")
) %>%
select(-location)
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
#create a function that completes stations_metadata to a data frame
transform_metadata_to_df<-function(
stations_metadata[[1]] %>%
#create a function that completes stations_metadata to a data frame
transform_metadata_to_df<- function (metadata){
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
mutate(location=map(location,unlist)) %>%
mutate(
lat=map_dbl(location,"latLon.lat"),
lon=map_dbl(location,"latLon.lon")
) %>%
select(-location)
}
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
stations_metadata_df
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
#### 3: Testing metadata
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
#create a function that completes stations_metadata to a data frame
transform_metadata_to_df<- function (metadata){
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
mutate(location=map(location,unlist)) %>%
mutate(
lat=map_dbl(location,"latLon.lat"),
lon=map_dbl(location,"latLon.lon")
) %>%
select(-location)
}
#### 3: Testing metadata
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
#### 3: Testing metadata
source("functions/data_tests.r")
test_stations_metadata(stations_metadata_df)
#create a function that completes stations_metadata to a data frame
transform_metadata_to_df<- function (metadata){
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData=map_chr(latestData,1,.default=NA_character_)) %>% # use map inside of mutate -> iterate over each item in the column
mutate(latestData=as_datetime(latestData,tz="Europe/Berlin")) %>%
mutate(location=map(location,unlist)) %>%
mutate(
lat=map_dbl(location,"latLon.lat"),
lon=map_dbl(location,"latLon.lon")
) %>%
select(-location)
}
transform_metadata_to_df()
#Obligatory Assignment ------
#PROBLEM 6 --------
library(igraph)
aff.df <- cbind(c(1,1,1,0,0,0,0),
c(0,1,1,1,1,0,0),
c(0,0,0,1,0,1,0),
c(0,0,0,0,1,1,1))
colnames(aff.df) <-c("A","B","C",
"D")
rownames(aff.df) <- c("1", "2","3", "4","5","6","7")
aff.df
bn <- graph.incidence(aff.df) #creates bipartite igraph graph
plt.x <- c(rep(2,7),rep(4,4)) #rep generates a vector of six 2s
plt.y <- c(8:2,6:3) #vectors determine position of graph
lay <- as.matrix(cbind(plt.x,plt.y))
shapes <- c("circle","square")
colors <- c("blue","red")
plot(bn,vertex.color=colors[V(bn)$type+1],
vertex.shape=shapes[V(bn)$type+1],
vertex.size=10,vertex.label.degree=-pi/2,
vertex.label.dist=1.2,vertex.label.cex=0.9,
layout=lay)
bn.pr <- bipartite.projection(bn) #graph is projected into two one-mode networks
bn.pr
graph.density(bn.pr$proj1) #????
bn.numbers <- bn.pr$proj1
graph.density(bn.numbers)
bn.letters <- bn.pr$proj2
bn.letters
get.adjacency(bn.letters,sparse=FALSE,attr="weight")
get.adjacency(bn.numbers,sparse=FALSE,attr="weight")
shapes <- c("circle","square")
colors <- c("blue","red")
op <- par(mfrow=c(1,2))
plot(bn.numbers,vertex.color="blue",
vertex.shape="circle",main="Numbers",
edge.width=E(bn.numbers)$weight*3,
vertex.size=15,vertex.label.degree=-pi/2,
vertex.label.dist=1.2,vertex.label.cex=1)
plot(bn.letters,vertex.color="red",
vertex.shape="square",main="Letters",
edge.width=E(bn.letters)$weight*3,
vertex.size=15,vertex.label.degree=-pi/2,
vertex.label.dist=1.2,vertex.label.cex=1)
par(op)
#PROBLEM 7------
library(igraph)
library(devtools)
library(UserNetR)
library(intergraph)
data(Moreno)
iMoreno <- asIgraph(Moreno)
plot(iMoreno)
cw <- cluster_walktrap(iMoreno)
modularity(cw)
#edge betweenness for community detection
ceb <- cluster_edge_betweenness(iMoreno)
membership(ceb)
modularity(ceb)
op <- par(mfrow=c(1,1))
plot(ceb, iMoreno)
par(op)
cw <- cluster_walktrap(iMoreno)
modularity(cw)
membership(cw)
cfg <- cluster_fast_greedy(iMoreno)
modularity(cfg)
membership(cfg)
clp <- cluster_label_prop(iMoreno)
modularity(clp)
membership(clp)
cle <- cluster_leading_eigen(iMoreno)
modularity(cle)
membership(cle)
cl <- cluster_louvain(iMoreno)
modularity(cl)
membership(cl)
co <- cluster_optimal(iMoreno)
modularity(co)
membership(co)
compare(cw,ceb,method="adjusted.rand")
compare(cw,cfg,method="adjusted.rand")
op <- par(mfrow=c(3,2),mar=c(3,0,2,0))
plot(ceb, iMoreno,
main="Edge Betweenness")
plot(cfg, iMoreno,
main="Fastgreedy")
op <- par(mfrow=c(3,2),mar=c(3,0,2,0))
plot(ceb, iMoreno,
main="Edge Betweenness")
cfg <- cluster_fast_greedy(iMoreno)
modularity(cfg)
membership(cfg)
clp <- cluster_label_prop(iMoreno)
modularity(clp)
membership(clp)
cle <- cluster_leading_eigen(iMoreno)
modularity(cle)
membership(cle)
cl <- cluster_louvain(iMoreno)
modularity(cl)
membership(cl)
co <- cluster_optimal(iMoreno)
modularity(co)
membership(co)
compare(cw,ceb,method="adjusted.rand")
compare(cw,cfg,method="adjusted.rand")
op <- par(mfrow=c(3,2),mar=c(3,0,2,0))
plot(ceb, iMoreno,
main="Edge Betweenness")
#PROBLEM 7------
library(igraph)
library(devtools)
library(UserNetR)
library(intergraph)
#Obligatory Assignment ------
#PROBLEM 6 --------
library(igraph)
data(Moreno)
iMoreno <- asIgraph(Moreno)
plot(iMoreno)
